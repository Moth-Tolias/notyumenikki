<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dir_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//set cordinates to the warp position
x = global.pX;
y = global.pY;
MySpeed = 2;
CanMove = true;
MyDir = cardinals.south; // i'm going to have to change this gosh darn it
//PlayerSize = (16); // change if tiny
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///moving
if CanMove == false {
    exit;
    }

scr_get_input(false);
scr_get_input(true);
var xx, yy, NoChange;
xx = 0;
yy = 0;


/*NoChange = false;

//if we are already traveling in the direction we are facing, don't change
if ((MyDir == cardinals.north) and (PressingKeyU))
or ((MyDir == cardinals.northeast) and (PressingKeyU and PressingKeyR))
or ((MyDir == cardinals.east) and (PressingKeyR))
or ((MyDir == cardinals.southeast) and (PressingKeyD and PressingKeyR))
or ((MyDir == cardinals.south) and (PressingKeyD))
or ((MyDir == cardinals.southwest) and (PressingKeyD and pressingKeyL))
or ((MyDir == cardinals.west) and (PressingKeyL))
or ((MyDir == cardinals.northwest) and (PressingKeyU and PressingKeyL)) {
    NoChange = true;
    }
*/

//key checks
if (PressingKeyU) {
   yy -= MySpeed;
   }
if PressingKeyD {
   yy += MySpeed;
   }
if (PressingKeyL) {
   xx -= MySpeed;
   }
if PressingKeyR {
   xx += MySpeed;
   }

//move
scr_move(xx, yy);

//direction setting   
//if NoChange == false {
    MyDir = scr_set_direction(xx, yy, MyDir);
//    }


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///interaction
var InteractZoneX, InteractZoneY, PlayerSizeX, PlayerSizeY;
PlayerSizeX = ((bbox_right +1) -bbox_left);
PlayerSizeY = ((bbox_bottom +1) -bbox_top);

switch (MyDir) {
    case cardinals.north: InteractZoneX = 0; InteractZoneY = -PlayerSizeY; break;
    case cardinals.south: InteractZoneX = 0; InteractZoneY = PlayerSizeY;  break;
    case cardinals.east:  InteractZoneX = PlayerSizeX; InteractZoneY = 0;  break;
    case cardinals.west:  InteractZoneX = -PlayerSizeX; InteractZoneY = 0; break;
    case cardinals.northeast: InteractZoneX = PlayerSizeX; InteractZoneY = -PlayerSizeY; break;
    case cardinals.southeast: InteractZoneX = PlayerSizeX; InteractZoneY = PlayerSizeY;  break;
    case cardinals.northwest:  InteractZoneX = -PlayerSizeX; InteractZoneY = -PlayerSizeY;  break;
    case cardinals.southwest:  InteractZoneX = -PlayerSizeX; InteractZoneY = PlayerSizeY; break;
    default: show_error("directions out of range", true);
    }

if PressedKeyA {
   var Target = collision_rectangle(
                (x +InteractZoneX), (y +InteractZoneY),
                ((x +InteractZoneX) +(PlayerSizeX-1)),
                ((y +InteractZoneY) +(PlayerSizeY-1)),
                obj_interactable_parent, false, true);

   if Target != noone {
       with Target {
           event_user(0);
           }
       }
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_rectangle(bbox_right,bbox_top,bbox_left,bbox_bottom,true)

switch (MyDir) { //the flippped sprite widths are hardcoded, change them
   case cardinals.north:     draw_sprite(spr_dir_up, 0, x, y); break;
   case cardinals.south:     draw_sprite(spr_dir_down, 0, x, y); break;
   case cardinals.east:      draw_sprite_ext(spr_dir_left, 0, x +16, y, -1, 1, 0, c_white, 1); break;
   case cardinals.west:      draw_sprite(spr_dir_left, 0, x, y); break;
   case cardinals.northeast: draw_sprite_ext(spr_dir_upleft, 0, x +16, y, -1, 1, 0, c_white, 1); break;
   case cardinals.southeast: draw_sprite_ext(spr_dir_downleft, 0, x +16, y, -1, 1, 0, c_white, 1); break;
   case cardinals.northwest: draw_sprite(spr_dir_upleft, 0, x, y); break;
   case cardinals.southwest: draw_sprite(spr_dir_downleft, 0, x, y); break;
   default: show_error("direction out of range", false);
   }

//debug
draw_set_colour(c_lime)
draw_rectangle(bbox_right,bbox_top,bbox_left,bbox_bottom,true)
var InteractZoneX, InteractZoneY, PlayerSizeX, PlayerSizeY;
PlayerSizeX = ((bbox_right +1) -bbox_left);
PlayerSizeY = ((bbox_bottom +1) -bbox_top);

switch (MyDir) {
    case cardinals.north: InteractZoneX = 0; InteractZoneY = -PlayerSizeY; break;
    case cardinals.south: InteractZoneX = 0; InteractZoneY = PlayerSizeY;  break;
    case cardinals.east:  InteractZoneX = PlayerSizeX; InteractZoneY = 0;  break;
    case cardinals.west:  InteractZoneX = -PlayerSizeX; InteractZoneY = 0; break;
    case cardinals.northeast: InteractZoneX = PlayerSizeX; InteractZoneY = -PlayerSizeY; break;
    case cardinals.southeast: InteractZoneX = PlayerSizeX; InteractZoneY = PlayerSizeY;  break;
    case cardinals.northwest:  InteractZoneX = -PlayerSizeX; InteractZoneY = -PlayerSizeY;  break;
    case cardinals.southwest:  InteractZoneX = -PlayerSizeX; InteractZoneY = PlayerSizeY; break;
    default: show_error("directions out of range", true);
    }

if PressingKeyA {
   var Target = draw_rectangle(
   (x +InteractZoneX), (y +InteractZoneY),
   ((x +InteractZoneX) +(PlayerSizeX-1)),
   ((y +InteractZoneY) +(PlayerSizeY-1)), true);
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
