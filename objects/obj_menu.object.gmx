<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_default</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.PixelFont = font_add_sprite(spr_font_apple2,32,false,0);
//set vars
MenuChoice = 0;
SelectionChoice = 0;
AcceptingInput = true//false;
AcceptSelection = false;
MenuState = menustates.menu_title;

KeyA = ord("Z");
KeyB = ord("X");
KeyX = ord("C");
KeyU = vk_up;
KeyD = vk_down;
KeyL = vk_left;
KeyR = vk_right;
KeyS = vk_enter;


var i;
 i = 4;
 repeat(i+1)
    {
    OptionAmounts[i] = 0;
    i -= 1;
    }

OptionAmounts[menustates.menu_title] = 0;
OptionAmounts[menustates.menu_main] = 2;
OptionAmounts[menustates.menu_start] = 3;
OptionAmounts[menustates.menu_settings] = 6;
OptionAmounts[menustates.menu_controls] = 0;


//other text
//Press Start
//menusettingstext[0] = Settings
//settingstext[0] = Controls

MenuMainTxt[2] = "Quit"
MenuMainTxt[1] = "Settings"
MenuMainTxt[0] = "Begin"

MenuSaveTxt[3] = "Back"
MenuSaveTxt[2] = "[saveIII]"
MenuSaveTxt[1] = "[saveII]"
MenuSaveTxt[0] = "[saveI]"

MenuSetTxt[6] = "Back"
MenuSetTxt[5] = "Language"
MenuSetTxt[4] = "Controls"
MenuSetTxt[3] = "Shake"
MenuSetTxt[2] = "Display"
MenuSetTxt[1] = "SFX"
MenuSetTxt[0] = "Music"


//load these
//music_gain = 0.5
//sfx_gain = 0.5
///get values

//the room editor is kinda awful tbh
background_colour = c_black;
background_showcolour = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//get input
scr_get_input(true);

if AcceptingInput == true {
    
    //move cursor
    if PressedKeyU { MenuChoice -= 1; }
    if PressedKeyD { MenuChoice += 1; }
    //if acceptselection == true {
    //    if pressedL { selectionchoice -= 1; }
    //    if pressedR { selectionchoice += 1; }
    //    }
      
    MenuChoice = clamp(MenuChoice, 0, OptionAmounts[MenuState])

    //title
    if MenuState == menustates.menu_title {
        if (PressedKeyA or PressedKeyS) {
        MenuState = menustates.menu_main;
        exit;
        }
    }
    
    //main
    if MenuState == menustates.menu_main {
        if PressedKeyB {
            MenuState = menustates.menu_title;
            exit;
            }

        if (PressedKeyA or PressedKeyS) {
            if MenuChoice == optionmain.option_start {
                MenuState = menustates.menu_start;
                exit;
                }

            if MenuChoice == optionmain.option_settings {
                MenuState = menustates.menu_settings;
                exit;
                }
                
            if MenuChoice == optionmain.option_quit {
                game_end(); //apparently this doesn't work in a bunch of places but bleh
                exit;
                }
            }
        }

    //save select
    if MenuState == menustates.menu_start {
        if (PressedKeyB) or ((MenuChoice == optionstart.option_back) and (PressedKeyA or PressedKeyS)) {
            MenuState = menustates.menu_main;
            exit;
            }

        if (PressedKeyA or PressedKeyS) { 
            if MenuChoice == optionstart.option_load1 {
                scr_load("save1.ini");
                exit;
                }
            if MenuChoice == optionstart.option_load2 {
                scr_load("save2.ini");
                exit;
                }
            if MenuChoice == optionstart.option_load3 {
                scr_load("save3.ini");
                exit;
                }
            }
        }
    
    //settings
    if MenuState == menustates.menu_settings {
        if (PressedKeyB) or ((MenuChoice == optionsettings.option_back) and (PressedKeyA or PressedKeyS)) {
            scr_save_settings();
            MenuState = menustates.menu_main;
            exit;
            }
        
        if (MenuChoice == optionsettings.optioncontrols) and (PressedKeyA or PressedKeyS){
            MenuState = menustates.menu_controls;
            exit;
            }
        
        var Selector; //optimisation... sorry
        if MenuChoice == optionsettings.optionshake {
            Selector = global.ShakePref 
            Selector = (scr_set_variable(Selector, PressedKeyL, PressedKeyR, PressedKeyA, 1) mod NO_OF_SHAKEMODES);
            if Selector &lt;= -1 {
              Selector = (NO_OF_SHAKEMODES -1);
              }
            global.ShakePref = Selector;
            exit;
            }
        
        //screen size
        if MenuChoice == optionsettings.optionscreensize {
            Selector = global.ScreenSize;
            Selector = (scr_set_variable(Selector, PressedKeyL, PressedKeyR, PressedKeyA, 1) mod 4);
            if Selector &lt;= 0 {
               Selector = 4;
               }
            window_set_size(Selector * DEFAULT_SCREEN_X, Selector * DEFAULT_SCREEN_Y);
            global.ScreenSize = Selector;
            exit;
            }
        
        //getinput2
        scr_get_input(false);
        
        if MenuChoice == optionsettings.optionmus {
           global.MusicGain = clamp(scr_set_variable(global.MusicGain, PressingKeyL, PressingKeyR, false, 1), 0, 100)
           exit;
           }
        
        if MenuChoice == optionsettings.optionSFX {
           global.SFX_Gain = clamp(scr_set_variable(global.SFX_Gain, PressingKeyL, PressingKeyR, false, 1), 0, 100)
           exit;
           }             
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///load settings
scr_load_settings();
window_set_size(global.ScreenSize * DEFAULT_SCREEN_X, global.ScreenSize * DEFAULT_SCREEN_Y);

//load save previews?
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw stuff
draw_set_colour(c_white);//change this
draw_set_font(global.PixelFont);
draw_set_valign(fa_middle);
draw_set_halign(fa_center);

var bungo, orinoco, i;
bungo = 24;
orinoco = 32;
i = 0;

//press start
if MenuState == menustates.menu_title {  
   draw_sprite(spr_title, 0, 0, 0);
   draw_text((room_width * 0.5), (room_height * 0.75),"Press Start");
   }

//draw top menu text
if MenuState == menustates.menu_main {
   orinoco = (32*2.5);
   i = 0;
   repeat(array_length_1d(MenuMainTxt)) { 
       draw_text((room_width * 0.75), (orinoco + (bungo * i)), MenuMainTxt[i]);
       i +=1;
       }
   }

//draw saveslot text
if MenuState == menustates.menu_start {
   orinoco = (32*2.55);
   i = 0;
   repeat(array_length_1d(MenuSaveTxt)) { 
       draw_text((room_width * 0.75), (orinoco + (bungo * i)), MenuSaveTxt[i]);
       i +=1;
       }
   }

//draw settings text
if MenuState == menustates.menu_settings {
   orinoco = (32+16);
   draw_text((room_width * 0.25), (room_height * 0.5),"Settings");
   i = 0;
   repeat(array_length_1d(MenuSetTxt)) { //for (i = 0; i &lt; array_length_1d(menuSettxt); i += 1){
       draw_text((room_width * 0.75), (orinoco + (bungo * i)), MenuSetTxt[i]);
       i +=1;
       }
   }

//draw controls??
if MenuState == menustates.menu_controls {
   draw_text((room_width * 0.25), (room_height * 0.5),"Controls");
   } 

   
//draw save previews

//draw selector
if (AcceptingInput == true) and (MenuState != menustates.menu_title) {
    draw_sprite(spr_av_su, 0, (room_width * 0.75), (orinoco + (bungo * MenuChoice)))
    draw_sprite(spr_selector, 0, (room_width * 0.75) - 64, (orinoco + (bungo * MenuChoice)))
    }

//debug    
draw_text(64,16,string(global.MusicGain));
draw_text(64,32,string(global.SFX_Gain));
draw_text(64,48,string(AcceptingInput));
draw_text(64,64,string(global.ScreenSize));
draw_text(64,80,string(global.ShakePref));
//*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
